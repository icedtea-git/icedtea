// This file is an automatically generated file, please do not edit this file, modify the WrapperGenerator.java file instead !

package sun.awt.X11;

import sun.misc.*;

import sun.util.logging.PlatformLogger;
public class AwtGraphicsConfigData extends XWrapperBase { 
	private Unsafe unsafe = XlibWrapper.unsafe; 
	private final boolean should_free_memory;
	public static int getSize() { return 208; }
	public int getDataSize() { return getSize(); }

	long pData;

	public long getPData() { return pData; }


	public AwtGraphicsConfigData(long addr) {
		log.finest("Creating");
		pData=addr;
		should_free_memory = false;
	}


	public AwtGraphicsConfigData() {
		log.finest("Creating");
		pData = unsafe.allocateMemory(getSize());
		should_free_memory = true;
	}


	public void dispose() {
		log.finest("Disposing");
		if (should_free_memory) {
			log.finest("freeing memory");
			unsafe.freeMemory(pData); 
	}
		}
	public int get_awt_depth() { log.finest("");return (Native.getInt(pData+0)); }
	public void set_awt_depth(int v) { log.finest(""); Native.putInt(pData+0, v); }
	public long get_awt_cmap() { log.finest("");return (Native.getLong(pData+8)); }
	public void set_awt_cmap(long v) { log.finest(""); Native.putLong(pData+8, v); }
	public XVisualInfo get_awt_visInfo() { log.finest("");return new XVisualInfo(pData + 16); }
	public int get_awt_num_colors() { log.finest("");return (Native.getInt(pData+80)); }
	public void set_awt_num_colors(int v) { log.finest(""); Native.putInt(pData+80, v); }
	public awtImageData get_awtImage(int index) { log.finest(""); return (Native.getLong(pData+88) != 0)?(new awtImageData(Native.getLong(pData+88)+index*560)):(null); }
	public long get_awtImage() { log.finest("");return Native.getLong(pData+88); }
	public void set_awtImage(long v) { log.finest(""); Native.putLong(pData + 88, v); }
	public long get_AwtColorMatch(int index) { log.finest(""); return Native.getLong(pData+96)+index*Native.getLongSize(); }
	public long get_AwtColorMatch() { log.finest("");return Native.getLong(pData+96); }
	public void set_AwtColorMatch(long v) { log.finest(""); Native.putLong(pData + 96, v); }
	public long get_monoImage(int index) { log.finest(""); return Native.getLong(pData+104)+index*Native.getLongSize(); }
	public long get_monoImage() { log.finest("");return Native.getLong(pData+104); }
	public void set_monoImage(long v) { log.finest(""); Native.putLong(pData + 104, v); }
	public long get_monoPixmap() { log.finest("");return (Native.getLong(pData+112)); }
	public void set_monoPixmap(long v) { log.finest(""); Native.putLong(pData+112, v); }
	public int get_monoPixmapWidth() { log.finest("");return (Native.getInt(pData+120)); }
	public void set_monoPixmapWidth(int v) { log.finest(""); Native.putInt(pData+120, v); }
	public int get_monoPixmapHeight() { log.finest("");return (Native.getInt(pData+124)); }
	public void set_monoPixmapHeight(int v) { log.finest(""); Native.putInt(pData+124, v); }
	public long get_monoPixmapGC() { log.finest("");return (Native.getLong(pData+128)); }
	public void set_monoPixmapGC(long v) { log.finest(""); Native.putLong(pData+128, v); }
	public int get_pixelStride() { log.finest("");return (Native.getInt(pData+136)); }
	public void set_pixelStride(int v) { log.finest(""); Native.putInt(pData+136, v); }
	public ColorData get_color_data(int index) { log.finest(""); return (Native.getLong(pData+144) != 0)?(new ColorData(Native.getLong(pData+144)+index*88)):(null); }
	public long get_color_data() { log.finest("");return Native.getLong(pData+144); }
	public void set_color_data(long v) { log.finest(""); Native.putLong(pData + 144, v); }
	public long get_glxInfo(int index) { log.finest(""); return Native.getLong(pData+152)+index*Native.getLongSize(); }
	public long get_glxInfo() { log.finest("");return Native.getLong(pData+152); }
	public void set_glxInfo(long v) { log.finest(""); Native.putLong(pData + 152, v); }
	public int get_isTranslucencySupported() { log.finest("");return (Native.getInt(pData+160)); }
	public void set_isTranslucencySupported(int v) { log.finest(""); Native.putInt(pData+160, v); }
	public XRenderPictFormat get_renderPictFormat() { log.finest("");return new XRenderPictFormat(pData + 168); }


	String getName() {
		return "AwtGraphicsConfigData"; 
	}


	String getFieldsAsString() {
		StringBuilder ret = new StringBuilder(640);

		ret.append("awt_depth = ").append( get_awt_depth() ).append(", ");
		ret.append("awt_cmap = ").append( get_awt_cmap() ).append(", ");
		ret.append("awt_visInfo = ").append( get_awt_visInfo() ).append(", ");
		ret.append("awt_num_colors = ").append( get_awt_num_colors() ).append(", ");
		ret.append("awtImage = ").append( get_awtImage() ).append(", ");
		ret.append("AwtColorMatch = ").append( get_AwtColorMatch() ).append(", ");
		ret.append("monoImage = ").append( get_monoImage() ).append(", ");
		ret.append("monoPixmap = ").append( get_monoPixmap() ).append(", ");
		ret.append("monoPixmapWidth = ").append( get_monoPixmapWidth() ).append(", ");
		ret.append("monoPixmapHeight = ").append( get_monoPixmapHeight() ).append(", ");
		ret.append("monoPixmapGC = ").append( get_monoPixmapGC() ).append(", ");
		ret.append("pixelStride = ").append( get_pixelStride() ).append(", ");
		ret.append("color_data = ").append( get_color_data() ).append(", ");
		ret.append("glxInfo = ").append( get_glxInfo() ).append(", ");
		ret.append("isTranslucencySupported = ").append( get_isTranslucencySupported() ).append(", ");
		ret.append("renderPictFormat = ").append( get_renderPictFormat() ).append(", ");
		return ret.toString();
	}


}



