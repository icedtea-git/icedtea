// This file is an automatically generated file, please do not edit this file, modify the WrapperGenerator.java file instead !

package sun.awt.X11;

import sun.misc.*;

import sun.util.logging.PlatformLogger;
public class XkbEvent extends XWrapperBase { 
	private Unsafe unsafe = XlibWrapper.unsafe; 
	private final boolean should_free_memory;
	public static int getSize() { return 192; }
	public int getDataSize() { return getSize(); }

	long pData;

	public long getPData() { return pData; }


	public XkbEvent(long addr) {
		log.finest("Creating");
		pData=addr;
		should_free_memory = false;
	}


	public XkbEvent() {
		log.finest("Creating");
		pData = unsafe.allocateMemory(getSize());
		should_free_memory = true;
	}


	public void dispose() {
		log.finest("Disposing");
		if (should_free_memory) {
			log.finest("freeing memory");
			unsafe.freeMemory(pData); 
	}
		}
	public int get_type() { log.finest("");return (Native.getInt(pData+0)); }
	public void set_type(int v) { log.finest(""); Native.putInt(pData+0, v); }
	public XkbAnyEvent get_any() { log.finest("");return new XkbAnyEvent(pData + 0); }
	public XkbNewKeyboardNotifyEvent get_new_kbd() { log.finest("");return new XkbNewKeyboardNotifyEvent(pData + 0); }
	public XkbMapNotifyEvent get_map() { log.finest("");return new XkbMapNotifyEvent(pData + 0); }
	public XkbStateNotifyEvent get_state() { log.finest("");return new XkbStateNotifyEvent(pData + 0); }
	public XkbControlsNotifyEvent get_ctrls() { log.finest("");return new XkbControlsNotifyEvent(pData + 0); }
	public XkbIndicatorNotifyEvent get_indicators() { log.finest("");return new XkbIndicatorNotifyEvent(pData + 0); }
	public XkbNamesNotifyEvent get_names() { log.finest("");return new XkbNamesNotifyEvent(pData + 0); }
	public XkbCompatMapNotifyEvent get_compat() { log.finest("");return new XkbCompatMapNotifyEvent(pData + 0); }
	public XkbBellNotifyEvent get_bell() { log.finest("");return new XkbBellNotifyEvent(pData + 0); }
	public XkbActionMessageEvent get_message() { log.finest("");return new XkbActionMessageEvent(pData + 0); }
	public XkbAccessXNotifyEvent get_accessx() { log.finest("");return new XkbAccessXNotifyEvent(pData + 0); }
	public XkbExtensionDeviceNotifyEvent get_device() { log.finest("");return new XkbExtensionDeviceNotifyEvent(pData + 0); }
	public XEvent get_core() { log.finest("");return new XEvent(pData + 0); }


	String getName() {
		return "XkbEvent"; 
	}


	String getFieldsAsString() {
		StringBuilder ret = new StringBuilder(560);

		ret.append("type = ").append( XlibWrapper.eventToString[get_type()] ).append(", ");
		ret.append("any = ").append( get_any() ).append(", ");
		ret.append("new_kbd = ").append( get_new_kbd() ).append(", ");
		ret.append("map = ").append( get_map() ).append(", ");
		ret.append("state = ").append( get_state() ).append(", ");
		ret.append("ctrls = ").append( get_ctrls() ).append(", ");
		ret.append("indicators = ").append( get_indicators() ).append(", ");
		ret.append("names = ").append( get_names() ).append(", ");
		ret.append("compat = ").append( get_compat() ).append(", ");
		ret.append("bell = ").append( get_bell() ).append(", ");
		ret.append("message = ").append( get_message() ).append(", ");
		ret.append("accessx = ").append( get_accessx() ).append(", ");
		ret.append("device = ").append( get_device() ).append(", ");
		ret.append("core = ").append( get_core() ).append(", ");
		return ret.toString();
	}


}



